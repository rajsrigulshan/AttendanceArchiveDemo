// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                  Int @id @default(autoincrement())
  fullName                String
  email                   String @unique
  phone                   String
  dob                     DateTime
  isKid                   Boolean @default(false)
  gender                  Gender?
  locationId              Int
  Location                Location @relation(fields: [locationId], references: [locationId]) //one-to-Many, one location many users
  password                String
  role                    Roles
  joinDate                DateTime @default(now())
  planEndDate             DateTime?
  planStartDate           DateTime?
  membershipStatus        membershipStatus @default(active)
  attendance              Attendance[]
  otpVerificationCode     String @default("")
  otpVerificationExpiry   DateTime @default(now())
  isVerified              Boolean @default(false)
  otpResetCode            String @default("")
  otpResetExpiry          DateTime @default(now())
  UserPlanInfo UserPlanInfo[]
}



model SchedularLog{
  schedularLogId Int @id @default(autoincrement())
  schedularId String 
  executedDate DateTime @unique
}


model UserPlanInfo {
  userPlanId              Int @id @default(autoincrement())
  userId                  Int
  user                    User @relation(fields: [userId], references: [userId])
  coachingPlanId          Int
  coachingPlan            CoachingPlan @relation(fields: [coachingPlanId], references: [coachingPlanId])
  planStatus              Boolean
  paymentId               Int @unique
  payment                 Payment @relation(fields: [paymentId],references: [paymentId])
  planStartDate           DateTime
  planEndDate             DateTime
}

model Location {
  locationId              Int @id @default(autoincrement())
  name                    String @unique
  address                 String
  primaryUsers            User[]
  coachingSchedule        CoachingSchedule[]
}

model CoachingPlan {
  coachingPlanId          Int @id @default(autoincrement())
  name                    String @unique
  description             String
  planDuration            String 
  price                   Decimal
  UserPlanInfo UserPlanInfo[]
}

model CoachingSchedule {
  coachingScheduleId      Int @id @default(autoincrement())
  coachingBatch           coachingBatch
  coachingDays            String
  startTime               String
  endTime                 String
  location                Location? @relation(fields: [locationId], references: [locationId])
  locationId              Int
}

model Attendance {
  attendanceId            Int @id @default(autoincrement())
  isStatus                Boolean @default(false)
  attendanceDate          DateTime
  userId                  Int
  coachingScheduleId      Int?
  user                    User @relation(fields: [userId], references: [userId])
  @@unique([userId, attendanceDate])
}

model Payment {
  paymentId               Int @id @default(autoincrement())
  paymentDate             DateTime
  paymentAmount           Int
  isPaymentDone           Boolean @default(false)
  transactionDetails      String
  UserPlanInfo            UserPlanInfo?
}

enum Roles {
  admin
  student
  coach
}

enum membershipStatus {
  active
  inactive
}

enum Gender {
  male
  female
  other
}

enum coachingBatch {
  Kids_Standard
  Kids_Premium
  Adults_Standard
  Adults_Premium
}